
.http.const.indx: "<div id=\"mainContainer\">",
                "<div id=\"contentHeader\">",
                    "<div><img id=\"logo\" src=\"/logo.png\"></div>",
                    "<ul id=\"navigationBar\">",
                        "<li><a href=\"/index.html\">Home</a></li>",
                        "<li><a href=\"\">News</a></li>",
                        "<li><a href=\"/contacts.html\">Contact</a></li>",
                        "<li><a href=\"\">Playground</a></li>",
                    "</ul>",
                    "<div id=\"searchWrapper\">",
                        "<div id=\"searchField\"><input type=\"text\"/></div>",
                        "<b>&#9906;</b>",
                    "</div>",
                "</div>",
                "<div id=\"rootWrapper\">",
                    "<div id=\"indexContainer\">",
                        "<div id=\"accordion-menu\">%",
                        "</div>",
                    "</div>";

.http.const.cont: "<div id=\"contentContainer\">",
                        "<div id=\"contentDocument\">%</div>",
                        "<div id=\"footer\">",
                            "<footer>",
                                "<p>Made with ❤ to O language</p>",
                                "<p>© 2020 ThePlatform</p>",
                            "</footer>",
                        "</div>",
                    "</div>",
                "</div>",
            "</div>";

.http.const.temp: "<!doctype html>\r\n",
            "<html>\r\n",
            "<head>\r\n",
            "<link rel=\"stylesheet\" href=\"/styles.css\">",
            "<link rel=\"stylesheet\" href=\"/prism.css\">",
            "<script src=\"/scripts.js\"></script>",
            "<script src=\"/prism.js\"></script>",
            "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
            "<title>%</title>\r\n",
            "</head>\r\n",
            "<body>\r\n",
            "%\r\n",
            "</body>\r\n",
            "</html>";

// Create nested struct
.md.ht.list: {[rows]
    .lasti:: -1;
    lst: ,/
    {[row]
        (shift;val): row;

        v:
        if [.lasti=-1] {
            format["<li>%";,/.md.ht.build[,val]]
        } elif [shift>.lasti] {
            format["<ul><li>%";,/.md.ht.build[,val]]
        } elif [shift=.lasti] {
            format["</li><li>%";,/.md.ht.build[,val]]
        } else {
            dif: .lasti - shift;
            clt: ,/{"</ul></li>"}'!dif;
            clt,format["<li>%";,/.md.ht.build[,val]]
        };

        .lasti:: shift;
        v
    }'rows;

    "<ul>",
        lst,
        ("</li>",/{"</ul></li>"}'!.lasti),
    "</ul>"
};

.md.ht.pop: {[item]
    $[`v`l~type item;*item;item]
};

idx: {[item]
    .content,: item;
    item
};

// Build/Load
.md.ht.build: {[content]
    ,/
    {[record]
        if [`s`char~type record] {
            record
        } elif [`v`char~type record] {
            record
        } elif [`v`l~type record] {
            ,/o'record
        } else {
            (tag;text): (!record;. record);
            match [*tag] {
                `h1    -> format["<h1>%</h1>";idx .md.ht.pop text];
                `h2    -> format["<h2>%</h2>";idx .md.ht.pop text];
                `h3    -> format["<h3>%</h3>";idx .md.ht.pop text];
                `h4    -> format["<h4>%</h4>";idx .md.ht.pop text];
                `h5    -> format["<h5>%</h5>";idx .md.ht.pop text];
                `h6    -> format["<h6>%</h6>";idx .md.ht.pop text];
                `hr    -> "<hr></hr>";
                `esc1  -> format["<code class=\"code-inline\">%</code>";idx .md.ht.pop text];
                `esc2  -> format["<code class=\"code-inline\">%</code>";idx .md.ht.pop text];
                `esc3  -> format["<code class=\"code-inline\">%</code>";idx .md.ht.pop text];
                `esc4  -> format["%";idx .md.ht.pop text];
                `code  -> format["<pre class=\"code\"><code class=\"language-%\">%</code></pre>";
                                (.md.ht.pop text)`lang;(.md.ht.pop text)`body];
                `image -> format["<img src=\"%\" alt=\"%\">";(.md.ht.pop text)1;o[(.md.ht.pop text)0]];
                `link  -> format["<a href=\"%\">%</a>";ssr[(.md.ht.pop text)1;"md";"html"];o[(.md.ht.pop text)0]];
                `bold  -> format["<strong>%</strong>";idx .md.ht.pop text];
                `curs  -> format["<i>%</i>";idx .md.ht.pop text];
                `list  -> .md.ht.list[.md.ht.pop text];
                `text  -> idx .md.ht.pop text;
                `note  -> format["<div class=\"note\"><i class='fas fa-bell'> Note: </i> %</div>";idx .md.ht.pop text];
                `warn  -> format["<div class=\"warn\"><i class='fas fa-exclamation-triangle'> Attention: </i> %</div>";idx .md.ht.pop text];
                `crit  -> format["<div class=\"crit\"><i class='fas fa-radiation'> Critical: </i> %</div>";idx .md.ht.pop text];
                `ref   -> format["<div class=\"ref\"><i class='fas fa-book'></i>%</div>";idx .md.ht.pop text];
                `info  -> format["<div class=\"info\"><i class='fas fa-book-open'></i>%</div>";idx .md.ht.pop text];
                `para  -> format["<div><p>%</p></div>";$[1<#t:.md.ht.pop text;,/o't;o[t]]];
                `block -> format["<pre class=\"block\">%</pre>";idx .md.ht.pop text];
                `table -> format["<table>%</table>";,/o'[.md.ht.pop text]];
                `thead -> format["<tr>%</tr>";,/format["<th>%</th>";]'[.md.ht.pop text]];
                `trow  -> format["<tr>%</tr>";,/format["<td>%</td>";]'[.md.ht.pop text]];
                _      -> format["<unknown>%</unknown>";idx .md.ht.pop text];
            }
        }
    }'content
};

mkindx: {[mdpath]
    println["building: %";mdpath];
    .content:: ();
    cont: .md.pars "c"$read[`$":",mdpath];
    body: .md.ht.build[cont];
    body
};

mkone: {[mdpath]
    println["building: %";mdpath];
    .content:: ();
    cont: .md.pars "c"$read[`$":",mdpath];
    body: .md.ht.build[cont];
    stem: *"\\." vs last "/" vs mdpath;
    outp: ssr[ssr[mdpath;"source/";""];"md";"html"];
    index[`$outp]: ,/.content;
    +`document`content!(`$outp;body)
};

// get full list of md files
mdfiles: {[dir]
    l:os["dir";dir];
    m:l where {(x[1]~"file")&("md"~last "\\." vs x[3])}'l;
    d:l where {x[1]~"dir"}'l;
    f:3(~[@])'m;
    f,,/o'[3(~[@])'d]
};

mkassets: {
    files: os["dir";"assets"];

    recs:
    {[file]
        name: file[3];
        (`$last "/" vs name;"c"$read `$":",name)
    }'files;

    +`document`content!+recs
};

mkContainer: "";

mkbook: {
    indx: mkindx["source/SUMMARY.md"];
    mkContainer:: format[.http.const.indx;indx];
    .book:: mkassets[];
    {[file]
        if [~file like "SUMMARY"] {
            built: @[mkone;file;{println["-- UNABLE TO BUILD: %";file]}];
            $[null built;();.book,:built];
        }
    }'mdfiles["source/"];
    .book
};
