home: getenv[`OHOME];

if [""~home] {println["ERROR: $OHOME is not set - exiting..."];exit 101};

load home,"markdown";
load home,"http";
load home,"core";
load "build";

index: (`symbol$())!();
book: mkbook[];

rebuild: reagent[`async];
react {[x:rebuild] book:: mkbook[]};

request: reagent[`async];
react {[x:request] x[book]};

// Serve
.http.default.host:  "PlatformBook";

searchTemplate: "<div id=\"searchResultsOuter\">",
    "<div id =\"searchResultsHeader\">% search results for '%':</div>",
    "<ul id=\"searchResults\">%</ul>",
    "</div>";

unquote: <- (("%27"/{"'"})  |
             ("%22"/{"\""}) |
             ("?"/{"\\?"})  |
             \.
            )*/{$[1>=#x;x;,/x]};

searchIndex: {[phrase]
    unquoted: $[null u:unquote phrase;"#";u];
    found: (!index)
    {[file;content]
        ids: ss[content;unquoted];
        $[0=#ids;0N0;file]
    }'. index;
    found: found where ~0N0~'found;
    li: ,/
    {[file]
        deco: ssr[*"\\." vs $file;"/";" >> "];
        format["<li><a href=\"/%\">%</a></li>";file;deco]
    }'found;

    format[searchTemplate;#found;unquoted;li]
};

content: {[url]
    response: reagent[`async];
    request[response];
    get response
};

html: {[url]
    pag: ("p=" vs url)1;
    book: getBook[];
    if [^pag] {
        c: 0N#.?[book;,(=;`document;,`$url);0b;()];
        r: *c[`content];
        $[0=#r;0N0;format[.http.const.temp;*"\\." vs url;
                mkContainer,format[.http.const.cont;r]]]
    } else {
        c: 0N#.?[book;,(=;`document;,`$"c"$1_"x"$pag);0b;()];
        r: *c[`content];
        $[0=#r;0N0;r]
    }
};

asset: {[url]
    book: getBook[];
    c: 0N#.?[book;,(=;`document;,url);0b;()];
    r: *c[`content];
    $[0=#r;0N0;r]
};

.http.default.handle: {[sock;req]
    url: "c"$1_"x"$.http.req.parse[req][`url];
    qry: ("q=" vs url)1;
    if [^qry] {
        con: $["html"~last "\\." vs url;html[url];asset[`$url]];
        $[0N0~con;
            .http.resp.error[sock;404;"Not found";"Invalid URL"];
            .http.resp.ok[sock;`$("\\." vs url)1;con]]
    } else {
        .http.resp.ok[sock;`$("\\." vs url)1;searchIndex[qry]]
    }
};

.http.run[];

load home,"repl";

lastmod: {[dir]
    l: os["dir";dir];
    m: l where {(x[1]~"file")}'l;
    d: l where {x[1]~"dir"}'l;
    f: |/ *'m;
    |/ f,/o'[3(~[@])'d]
};

// File watcher
spawn {
    .lastmod:: |/lastmod["source"],lastmod["assets"];
    tick: reagent[`timer;1000;0];
    react {[t:tick]
        system["git pull"];
        tmod: |/lastmod["source"],lastmod["assets"];
        if [.lastmod<tmod] {
            .lastmod:: tmod;
            rebuild[];
        }
    }
};
// --