home: getenv[`OHOME];

if [""~home] {println["ERROR: $OHOME is not set - exiting..."];exit 101};

load "markdown";
load home,"http";
load home,"core";
load "build";

book: mkbook[];

rebuild: reagent[`async];
react {[x:rebuild] book:: mkbook[]};

request: reagent[`async];
react {[x:request] x[book]};

// Serve
.http.default.host:  "PlatformBook";

searchTemplate: "<div id=\"searchResultsOuter\">",
    "<div id =\"searchResultsHeader\">% search results for '%':</div>",
    "<ul id=\"searchResults\">%</ul>",
    "</div>";

search: {[book;phrase]
    response: reagent[`async];
    request[response];
    book: get response;
    found: {f:ss[x`content;phrase];$[0=#f;0N0;(x`document;f)]}'book;
    found: found where ~0N0~'found;
    li: ,/
    {[rec]
        format["<li><a href=\"/%\">%</a></li>";rec[0];rec[0]]
    }'found;
    format[searchTemplate;#found;phrase;li]
};

content: {[url]
    response: reagent[`async];
    request[response];
    book: get response;
    c: 0N#.?[book;,(=;`document;,url);0b;()];
    r: *c[`content];
    $[0=#r;0N0;r]
};

.http.default.handle: {[sock;req]
    url: "c"$1_"x"$.http.req.parse[req][`url];
    qry: ("\\?q=" vs url)1;
    if [^qry] {
        con: content[`$url];
        $[0N0~con;
            .http.resp.error[sock;404;"Not found";"Invalid URL"];
            .http.resp.ok[sock;`$("\\." vs url)1;con]]
    } else {
        .http.resp.ok[sock;`$("\\." vs url)1;search[book;qry]]
    }
};

.http.run[];

load home,"repl";

lastmod: {[dir]
    l: os["dir";dir];
    m: l where {(x[1]~"file")&("md"~last "\\." vs x[3])}'l;
    d: l where {x[1]~"dir"}'l;
    f: |/ *'m;
    |/ f,/o'[3(~[@])'d]
};

// File watcher
spawn {
    .lastmod:: lastmod["source"];
    tick: reagent[`timer;1000;0];
    react {[t:tick]
        system["git pull"];
        tmod: lastmod["source"];
        if [.lastmod<tmod] {
            .lastmod:: tmod;
            rebuild[];
        }
    }
};
// --